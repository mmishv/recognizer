{
	"info": {
		"_postman_id": "108d8c94-0763-493d-9a8a-e64b6f568a54",
		"name": "Auto Driver Management Service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25914446"
	},
	"item": [
		{
			"name": "/v1/announcements",
			"item": [
				{
					"name": "/v1/announcements 200 OK",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_token',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 200 = OK",
									" */",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(\"items\", \"total_count\", \"links\")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.items).to.a(\"array\");",
									"    pm.expect(jsonData.total_count).to.a(\"number\"); ",
									"    pm.expect(jsonData.links).to.a(\"object\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"items\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"                \"type\": \"object\",",
									"                \"required\": [",
									"                    \"token\",",
									"                    \"title\",",
									"                    \"body\",",
									"                    \"valid_until\"",
									"                ],",
									"            },",
									"        },",
									"        \"total_count\":{",
									"            \"type\": \"number\"",
									"        },",
									"        \"links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"first\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": {",
									"                            \"type\": \"string\"",
									"                        },",
									"                    },",
									"                },",
									"                \"last\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": {",
									"                            \"type\": \"string\"",
									"                        },",
									"                    },",
									"                },",
									"                \"previous\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": {",
									"                            \"type\": \"string\"",
									"                        },",
									"                    },",
									"                },",
									"                \"next\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": {",
									"                            \"type\": \"string\"",
									"                        },",
									"                    },",
									"                },",
									"            },",
									"            \"additionalProperties\": false",
									"        },",
									"    },    ",
									"    \"required\": [",
									"        \"items\",",
									"        \"total_count\",",
									"        \"links\"",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/announcements?page=1",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"announcements"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/announcements 403 Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 403 = FORBIDDEN",
									" */",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Operation is not permitted\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_token',",
									"    'roles': ['RANDOM'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/announcements",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"announcements"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/v1/communities",
			"item": [
				{
					"name": "/v1/communities 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 204 = No Content",
									" */",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_token',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Community 1\",\n    \"icon\": \"icon\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/v1/communities",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities 422 Community Number Limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 422 == Unprocessable Entity",
									" */",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									"        \"premium_required\"",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Upgrade to the premium version to have as many communities as you want!\");",
									"    pm.expect(jsonData.premium_required).to.eql(true);",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        },",
									"        \"premium_required\": {",
									"            \"type\": \"boolean\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"        \"premium_required\"",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_with_five_communities',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Community 1\",\n    \"icon\": \"icon\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/v1/communities",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities 403 Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 403 = FORBIDDEN",
									" */",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Operation is not permitted\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_token',",
									"    'roles': ['RANDOM'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Community 1\",\n    \"icon\": \"icon\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/v1/communities",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 200 = OK",
									" */",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(\"items\", \"total_count\", \"links\")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.items).to.a(\"array\");",
									"    pm.expect(jsonData.total_count).to.a(\"number\"); ",
									"    pm.expect(jsonData.links).to.a(\"object\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"items\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"                \"type\": \"object\",",
									"                \"required\": [",
									"                    \"token\",",
									"                    \"name\",",
									"                    \"max_size\",",
									"                    \"icon\",",
									"                    \"community_type\",",
									"                    \"created_at\",",
									"                    \"updated_at\",",
									"                    \"auto_driver_rank\",",
									"                    \"size\",",
									"                    \"moderators\",",
									"                    \"user_creator_token\"",
									"                ],",
									"            },",
									"        },",
									"        \"total_count\":{",
									"            \"type\": \"number\"",
									"        },",
									"        \"links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"first\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": {",
									"                            \"type\": \"string\"",
									"                        },",
									"                    },",
									"                },",
									"                \"last\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": {",
									"                            \"type\": \"string\"",
									"                        },",
									"                    },",
									"                },",
									"                \"previous\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": {",
									"                            \"type\": \"string\"",
									"                        },",
									"                    },",
									"                },",
									"                \"next\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": {",
									"                            \"type\": \"string\"",
									"                        },",
									"                    },",
									"                },",
									"            },",
									"            \"required\": [",
									"                \"first\",",
									"                \"last\"",
									"            ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },    ",
									"    \"required\": [",
									"        \"items\",",
									"        \"total_count\",",
									"        \"links\"",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_token',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/communities",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities 403 Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 403 = FORBIDDEN",
									" */",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Operation is not permitted\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_token',",
									"    'roles': ['RANDOM']",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/v1/communities",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities/{community_token}/members 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 200 = OK",
									" */",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(\"items\", \"total_count\", \"links\")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.items).to.a(\"array\");",
									"    pm.expect(jsonData.total_count).to.a(\"number\"); ",
									"    pm.expect(jsonData.links).to.a(\"object\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"items\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"                \"type\": \"object\",",
									"                \"required\": [",
									"                    \"token\",",
									"                    \"name\",",
									"                    \"firstname\"",
									"                ],",
									"            },",
									"        },",
									"        \"total_count\":{",
									"            \"type\": \"number\"",
									"        },",
									"        \"links\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"first\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": {",
									"                            \"type\": \"string\"",
									"                        },",
									"                    },",
									"                },",
									"                \"last\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": {",
									"                            \"type\": \"string\"",
									"                        },",
									"                    },",
									"                },",
									"                \"previous\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": {",
									"                            \"type\": \"string\"",
									"                        },",
									"                    },",
									"                },",
									"                \"next\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"href\": {",
									"                            \"type\": \"string\"",
									"                        },",
									"                    },",
									"                },",
									"            },",
									"            \"required\": [",
									"                \"first\",",
									"                \"last\"",
									"            ],",
									"            \"additionalProperties\": false",
									"        },",
									"    },    ",
									"    \"required\": [",
									"        \"items\",",
									"        \"total_count\",",
									"        \"links\"",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_token',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/communities/e6a731d6-3d28-4152-98ae-53c2cf9960d8/members",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities",
								"e6a731d6-3d28-4152-98ae-53c2cf9960d8",
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities/{community_token}/members 403 Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 403 = FORBIDDEN",
									" */",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Operation is not permitted\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_with_five_communities',",
									"    'roles': ['AUTO_DRIVER']",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/v1/communities/e6a731d6-3d28-4152-98ae-53c2cf9960d8/members",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities",
								"e6a731d6-3d28-4152-98ae-53c2cf9960d8",
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities/{community_token}/members 404 Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 403 = FORBIDDEN",
									" */",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Community not found: random_token\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_token',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Community New\",\n    \"icon\": \"new_icon\"\n}"
						},
						"url": {
							"raw": "{{api_url}}/v1/communities/random_token/members",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities",
								"random_token",
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities/{community_token}/auto-driver/{driver_token} 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 204 = No Content",
									" */",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_token',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/communities/e6a731d6-3d28-4152-98ae-53c2cf9960d8/auto-driver/removed_driver_token",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities",
								"e6a731d6-3d28-4152-98ae-53c2cf9960d8",
								"auto-driver",
								"removed_driver_token"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities/{community_token}/auto-driver/{driver_token} 403 Forbidden Not Moderator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 403 = FORBIDDEN",
									" */",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Operation is not permitted\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'joined_driver_token',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/communities/e6a731d6-3d28-4152-98ae-53c2cf9960d8/auto-driver/driver_token",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities",
								"e6a731d6-3d28-4152-98ae-53c2cf9960d8",
								"auto-driver",
								"driver_token"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities/{community_token}/auto-driver/{driver_token} 403 Forbidden Not Moderator Community Member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 403 = FORBIDDEN",
									" */",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Operation is not permitted\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_token',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/communities/e6a731d6-3d28-4152-98ae-53c2cf9960d8/auto-driver/random_token",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities",
								"e6a731d6-3d28-4152-98ae-53c2cf9960d8",
								"auto-driver",
								"random_token"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities/{community_token}/auto-driver/{driver_token} 404 Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 403 = FORBIDDEN",
									" */",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Community not found: random_token\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'joined_driver_token',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/communities/random_token/auto-driver/removed_driver_token",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities",
								"random_token",
								"auto-driver",
								"removed_driver_token"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities/{community_token}/me 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 204 = No Content",
									" */",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'left_driver_token',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/communities/e6a731d6-3d28-4152-98ae-53c2cf9960d8/me",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities",
								"e6a731d6-3d28-4152-98ae-53c2cf9960d8",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities/{community_token}/me 403 Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 403 = FORBIDDEN",
									" */",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Operation is not permitted\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_token',",
									"    'roles': ['RANDOM'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/communities/any_token/me",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities",
								"any_token",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities/{community_token}/me 404 Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'joined_driver_token',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'left_driver_token',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/communities/random_token/me",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities",
								"random_token",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities/{community_token}/join 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 204 = No Content",
									" */",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'joined_driver_token',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/communities/e6a731d6-3d28-4152-98ae-53c2cf9960d8/join",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities",
								"e6a731d6-3d28-4152-98ae-53c2cf9960d8",
								"join"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities/{community_token}/join 404 Community Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 403 = FORBIDDEN",
									" */",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Community not found: random_token\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'joined_driver_token',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/communities/random_token/join",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities",
								"random_token",
								"join"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities/{community_token}/join 404 Driver Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 403 = FORBIDDEN",
									" */",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Driver not found: random\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'random',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/communities/e6a731d6-3d28-4152-98ae-53c2cf9960d8/join",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities",
								"e6a731d6-3d28-4152-98ae-53c2cf9960d8",
								"join"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities/{community_token}/join 422 Unprocessable Entity Already Member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 422 == Unprocessable Entity",
									" */",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Community membership already exists: e6a731d6-3d28-4152-98ae-53c2cf9960d8\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_token',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/communities/e6a731d6-3d28-4152-98ae-53c2cf9960d8/join",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities",
								"e6a731d6-3d28-4152-98ae-53c2cf9960d8",
								"join"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities/{community_token}/join 422 Unprocessable Entity Full Community",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 422 == Unprocessable Entity",
									" */",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Community is completely full: 88a3be62-52f2-4940-ad94-7f637137384c\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_token',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/communities/88a3be62-52f2-4940-ad94-7f637137384c/join",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities",
								"88a3be62-52f2-4940-ad94-7f637137384c",
								"join"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities/{community_token} 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 204 = No Content",
									" */",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_token',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/v1/communities/65d67bb2-d1a3-43ba-8804-79975a8fedf5",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities",
								"65d67bb2-d1a3-43ba-8804-79975a8fedf5"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities/{community_token} 404 Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 403 = FORBIDDEN",
									" */",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Community not found: random_token\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_token',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/communities/random_token",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities",
								"random_token"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities/{community_token} 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 204 = No Content",
									" */",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_token',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Community New\",\n    \"icon\": \"new_icon\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/v1/communities/e6a731d6-3d28-4152-98ae-53c2cf9960d8",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities",
								"e6a731d6-3d28-4152-98ae-53c2cf9960d8"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities/{community_token} 403 Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 403 = FORBIDDEN",
									" */",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Operation is not permitted\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'not_member',",
									"\t'roles': ['ADMIN'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Community New\",\n    \"icon\": \"new_icon\"\n}"
						},
						"url": {
							"raw": "{{api_url}}/v1/communities/e6a731d6-3d28-4152-98ae-53c2cf9960d8",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities",
								"e6a731d6-3d28-4152-98ae-53c2cf9960d8"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities/{community_token} 404 Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 403 = FORBIDDEN",
									" */",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Community not found: random_token\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_token',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Community New\",\n    \"icon\": \"new_icon\"\n}"
						},
						"url": {
							"raw": "{{api_url}}/v1/communities/random_token",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities",
								"random_token"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities/{community_token} 422 Unprocessable Entity Null Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 422 == Unprocessable Entity",
									" */",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_token',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": null,\n    \"icon\": \"new_icon\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/v1/communities/e6a731d6-3d28-4152-98ae-53c2cf9960d8",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities",
								"e6a731d6-3d28-4152-98ae-53c2cf9960d8"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities/global 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 200 = OK",
									" */",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_token',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/communities/global?period=month",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities",
								"global"
							],
							"query": [
								{
									"key": "period",
									"value": "month"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities/global 403 Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 403 = FORBIDDEN",
									" */",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Operation is not permitted\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_token',",
									"    'roles': ['RANDOM'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/communities/global?period=month",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities",
								"global"
							],
							"query": [
								{
									"key": "period",
									"value": "month"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities/{community_token}/rating 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 200 = OK",
									" */",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(\"items\", \"community_size\")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.items).to.a(\"array\");",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_token',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/communities/e6a731d6-3d28-4152-98ae-53c2cf9960d8/rating?period=month&criteria=distraction_score",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities",
								"e6a731d6-3d28-4152-98ae-53c2cf9960d8",
								"rating"
							],
							"query": [
								{
									"key": "period",
									"value": "month"
								},
								{
									"key": "criteria",
									"value": "distraction_score"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities/{community_token}/rating 403 Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 403 = FORBIDDEN",
									" */",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Operation is not permitted\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_with_five_communities',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/communities/e6a731d6-3d28-4152-98ae-53c2cf9960d8/rating?period=month&criteria=distraction_score",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities",
								"e6a731d6-3d28-4152-98ae-53c2cf9960d8",
								"rating"
							],
							"query": [
								{
									"key": "period",
									"value": "month"
								},
								{
									"key": "criteria",
									"value": "distraction_score"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities/{community_token}/rating 404 Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 403 = FORBIDDEN",
									" */",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Community not found: community_token1\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_token',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/communities/community_token1/rating?period=month&criteria=distraction_score",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities",
								"community_token1",
								"rating"
							],
							"query": [
								{
									"key": "period",
									"value": "month"
								},
								{
									"key": "criteria",
									"value": "distraction_score"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities/pro/{community_token}/rating 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 200 = OK",
									" */",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(\"items\", 'community_size')",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.items).to.a(\"array\");",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_token',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/communities/pro/e6a731d6-3d28-4152-98ae-53c2cf9960d8/rating?period=month&criteria=distraction_score",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities",
								"pro",
								"e6a731d6-3d28-4152-98ae-53c2cf9960d8",
								"rating"
							],
							"query": [
								{
									"key": "period",
									"value": "month"
								},
								{
									"key": "criteria",
									"value": "distraction_score"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities/pro/{community_token}/rating 403 Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 403 = FORBIDDEN",
									" */",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Operation is not permitted\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_with_five_communities',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/communities/pro/e6a731d6-3d28-4152-98ae-53c2cf9960d8/rating?period=month&criteria=distraction_score",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities",
								"pro",
								"e6a731d6-3d28-4152-98ae-53c2cf9960d8",
								"rating"
							],
							"query": [
								{
									"key": "period",
									"value": "month"
								},
								{
									"key": "criteria",
									"value": "distraction_score"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/communities/{community_token}/rating 404 Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 403 = FORBIDDEN",
									" */",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Community not found: community_token1\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_token',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/communities/pro/community_token1/rating?period=month&criteria=distraction_score",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"communities",
								"pro",
								"community_token1",
								"rating"
							],
							"query": [
								{
									"key": "period",
									"value": "month"
								},
								{
									"key": "criteria",
									"value": "distraction_score"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/v1/admin",
			"item": [
				{
					"name": "/communities",
					"item": [
						{
							"name": "/v1/admin/communities 200 OK",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/** ",
											" * Tests for HTTP status code",
											" * 204 = No Content",
											" */",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"/**",
											" * This generic test checks to see a response time of the API falls between 200ms and 10s",
											" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
											" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
											" * It is an all or nothing type deal. ",
											" * ",
											" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
											" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
											" */",
											"pm.test(\"Response time is less than 10s\", function () {",
											"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
											"    for (let i = 0; i < responseTimes.length; i++){",
											"        if(pm.response.responseTime < responseTimes[0]) {",
											"            msg = `Response time was less than ${responseTimes[0]}ms`;",
											"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(responseTimes[i] >= pm.response.responseTime) {",
											"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
											"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
											"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
											"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
											"            pm.test(msg, () => false);",
											"            break;",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
											"",
											"var jwtSecret = pm.environment.get('jwt_secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"  'typ': 'JWT',",
											"  'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"  'iss': 'admin_token',",
											"  'roles': ['ADMIN'],",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Community Pro\",\n    \"max_size\": 20,\n    \"community_type\": \"PRO\",\n    \"driver_moderator\": \"left_driver_token\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/v1/admin/communities",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"v1",
										"admin",
										"communities"
									]
								}
							},
							"response": []
						},
						{
							"name": "/v1/admin/communities 403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/** ",
											" * Tests for HTTP status code",
											" * 403 = FORBIDDEN",
											" */",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"/**",
											" * This generic test checks to see a response time of the API falls between 200ms and 10s",
											" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
											" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
											" * It is an all or nothing type deal. ",
											" * ",
											" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
											" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
											" */",
											"pm.test(\"Response time is less than 10s\", function () {",
											"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
											"    for (let i = 0; i < responseTimes.length; i++){",
											"        if(pm.response.responseTime < responseTimes[0]) {",
											"            msg = `Response time was less than ${responseTimes[0]}ms`;",
											"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(responseTimes[i] >= pm.response.responseTime) {",
											"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
											"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
											"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
											"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
											"            pm.test(msg, () => false);",
											"            break;",
											"        }",
											"    }",
											"});",
											"",
											"/**",
											" * Is the data empty?",
											" */",
											"pm.test(\"Test object properties\", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"});",
											"/**",
											" * Does the data have the keys we expect it to?",
											" */",
											"pm.test(\"Test keys properties\", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
											"        \"detail\", ",
											")",
											"});",
											"",
											"/**",
											" * Do the keys in the response have :",
											" * The data type we expect it to?",
											" * The value we expect it to?",
											" * The length we expect it to?",
											" */",
											"pm.test(\"Type and value tests\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.a(\"string\");",
											"    pm.expect(jsonData.detail).to.eql(\"Operation is not permitted\");",
											"});",
											"",
											"/**",
											" *)jv schema validation - https://ajv.js.org/",
											" * The following test is designed to guard against schema changes",
											" * without considering downstream impact. This is the JSON schema",
											" * for the response coming back from the API",
											" */",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"detail\": {",
											"            \"type\": \"string\",",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"detail\",",
											"    ],",
											"    \"additionalProperties\": false",
											"};",
											"pm.test(\"Schema is valid\", function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
											"",
											"var jwtSecret = pm.environment.get('jwt_secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"  'typ': 'JWT',",
											"  'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"  'iss': 'admin_token',",
											"  'roles': ['AUTO_DRIVER'],",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Community Premium\",\n    \"max_size\": 20,\n    \"community_type\": \"premium\",\n    \"driver_moderator\": \"left_driver_token\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/v1/admin/communities",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"v1",
										"admin",
										"communities"
									]
								}
							},
							"response": []
						},
						{
							"name": "/v1/admin/communities 404 Driver Admin Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/** ",
											" * Tests for HTTP status code",
											" * 404 = NOT FOUND",
											" */",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"/**",
											" * This generic test checks to see a response time of the API falls between 200ms and 10s",
											" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
											" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
											" * It is an all or nothing type deal. ",
											" * ",
											" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
											" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
											" */",
											"pm.test(\"Response time is less than 10s\", function () {",
											"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
											"    for (let i = 0; i < responseTimes.length; i++){",
											"        if(pm.response.responseTime < responseTimes[0]) {",
											"            msg = `Response time was less than ${responseTimes[0]}ms`;",
											"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(responseTimes[i] >= pm.response.responseTime) {",
											"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
											"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
											"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
											"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
											"            pm.test(msg, () => false);",
											"            break;",
											"        }",
											"    }",
											"});",
											"",
											"/**",
											" * Is the data empty?",
											" */",
											"pm.test(\"Test object properties\", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"});",
											"/**",
											" * Does the data have the keys we expect it to?",
											" */",
											"pm.test(\"Test keys properties\", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
											"        \"detail\", ",
											")",
											"});",
											"",
											"/**",
											" * Do the keys in the response have :",
											" * The data type we expect it to?",
											" * The value we expect it to?",
											" * The length we expect it to?",
											" */",
											"pm.test(\"Type and value tests\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.a(\"string\");",
											"    pm.expect(jsonData.detail).to.eql(\"Driver not found: random_token\");",
											"});",
											"",
											"/**",
											" *)jv schema validation - https://ajv.js.org/",
											" * The following test is designed to guard against schema changes",
											" * without considering downstream impact. This is the JSON schema",
											" * for the response coming back from the API",
											" */",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"detail\": {",
											"            \"type\": \"string\",",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"detail\",",
											"    ],",
											"    \"additionalProperties\": false",
											"};",
											"pm.test(\"Schema is valid\", function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
											"",
											"var jwtSecret = pm.environment.get('jwt_secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"  'typ': 'JWT',",
											"  'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"  'iss': 'admin_token',",
											"  'roles': ['ADMIN'],",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Community Pro\",\n    \"max_size\": 20,\n    \"community_type\": \"PRO\",\n    \"driver_moderator\": \"random_token\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/v1/admin/communities",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"v1",
										"admin",
										"communities"
									]
								}
							},
							"response": []
						},
						{
							"name": "/v1/admin/communities/{community_token} 200 OK",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/** ",
											" * Tests for HTTP status code",
											" * 204 = No Content",
											" */",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"/**",
											" * This generic test checks to see a response time of the API falls between 200ms and 10s",
											" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
											" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
											" * It is an all or nothing type deal. ",
											" * ",
											" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
											" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
											" */",
											"pm.test(\"Response time is less than 10s\", function () {",
											"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
											"    for (let i = 0; i < responseTimes.length; i++){",
											"        if(pm.response.responseTime < responseTimes[0]) {",
											"            msg = `Response time was less than ${responseTimes[0]}ms`;",
											"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(responseTimes[i] >= pm.response.responseTime) {",
											"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
											"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
											"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
											"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
											"            pm.test(msg, () => false);",
											"            break;",
											"        }",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
											"",
											"var jwtSecret = pm.environment.get('jwt_secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"  'typ': 'JWT',",
											"  'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"  'iss': 'admin_token',",
											"  'roles': ['ADMIN'],",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Community Admin Name\",\n    \"max_size\": 100,\n    \"community_type\": \"PRO\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/v1/admin/communities/e6a731d6-3d28-4152-98ae-53c2cf9960d8",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"v1",
										"admin",
										"communities",
										"e6a731d6-3d28-4152-98ae-53c2cf9960d8"
									]
								}
							},
							"response": []
						},
						{
							"name": "/v1/admin/communities/{community_token} 403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/** ",
											" * Tests for HTTP status code",
											" * 403 = FORBIDDEN",
											" */",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"/**",
											" * This generic test checks to see a response time of the API falls between 200ms and 10s",
											" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
											" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
											" * It is an all or nothing type deal. ",
											" * ",
											" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
											" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
											" */",
											"pm.test(\"Response time is less than 10s\", function () {",
											"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
											"    for (let i = 0; i < responseTimes.length; i++){",
											"        if(pm.response.responseTime < responseTimes[0]) {",
											"            msg = `Response time was less than ${responseTimes[0]}ms`;",
											"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(responseTimes[i] >= pm.response.responseTime) {",
											"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
											"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
											"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
											"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
											"            pm.test(msg, () => false);",
											"            break;",
											"        }",
											"    }",
											"});",
											"",
											"/**",
											" * Is the data empty?",
											" */",
											"pm.test(\"Test object properties\", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"});",
											"/**",
											" * Does the data have the keys we expect it to?",
											" */",
											"pm.test(\"Test keys properties\", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
											"        \"detail\", ",
											")",
											"});",
											"",
											"/**",
											" * Do the keys in the response have :",
											" * The data type we expect it to?",
											" * The value we expect it to?",
											" * The length we expect it to?",
											" */",
											"pm.test(\"Type and value tests\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.a(\"string\");",
											"    pm.expect(jsonData.detail).to.eql(\"Operation is not permitted\");",
											"});",
											"",
											"/**",
											" *)jv schema validation - https://ajv.js.org/",
											" * The following test is designed to guard against schema changes",
											" * without considering downstream impact. This is the JSON schema",
											" * for the response coming back from the API",
											" */",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"detail\": {",
											"            \"type\": \"string\",",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"detail\",",
											"    ],",
											"    \"additionalProperties\": false",
											"};",
											"pm.test(\"Schema is valid\", function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
											"",
											"var jwtSecret = pm.environment.get('jwt_secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': 'not_member',",
											"\t'roles': ['AUTO_DRIVER'],",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Community New\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/v1/admin/communities/e6a731d6-3d28-4152-98ae-53c2cf9960d8",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"v1",
										"admin",
										"communities",
										"e6a731d6-3d28-4152-98ae-53c2cf9960d8"
									]
								}
							},
							"response": []
						},
						{
							"name": "/v1/admin/communities/{community_token} 404 Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/** ",
											" * Tests for HTTP status code",
											" * 403 = FORBIDDEN",
											" */",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"/**",
											" * This generic test checks to see a response time of the API falls between 200ms and 10s",
											" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
											" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
											" * It is an all or nothing type deal. ",
											" * ",
											" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
											" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
											" */",
											"pm.test(\"Response time is less than 10s\", function () {",
											"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
											"    for (let i = 0; i < responseTimes.length; i++){",
											"        if(pm.response.responseTime < responseTimes[0]) {",
											"            msg = `Response time was less than ${responseTimes[0]}ms`;",
											"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(responseTimes[i] >= pm.response.responseTime) {",
											"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
											"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
											"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
											"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
											"            pm.test(msg, () => false);",
											"            break;",
											"        }",
											"    }",
											"});",
											"",
											"/**",
											" * Is the data empty?",
											" */",
											"pm.test(\"Test object properties\", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"});",
											"/**",
											" * Does the data have the keys we expect it to?",
											" */",
											"pm.test(\"Test keys properties\", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
											"        \"detail\", ",
											")",
											"});",
											"",
											"/**",
											" * Do the keys in the response have :",
											" * The data type we expect it to?",
											" * The value we expect it to?",
											" * The length we expect it to?",
											" */",
											"pm.test(\"Type and value tests\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.a(\"string\");",
											"    pm.expect(jsonData.detail).to.eql(\"Community not found: random_token\");",
											"});",
											"",
											"/**",
											" *)jv schema validation - https://ajv.js.org/",
											" * The following test is designed to guard against schema changes",
											" * without considering downstream impact. This is the JSON schema",
											" * for the response coming back from the API",
											" */",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"detail\": {",
											"            \"type\": \"string\",",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"detail\",",
											"    ],",
											"    \"additionalProperties\": false",
											"};",
											"pm.test(\"Schema is valid\", function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
											"",
											"var jwtSecret = pm.environment.get('jwt_secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': 'admin_token',",
											"\t'roles': ['ADMIN'],",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Community New\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/v1/admin/communities/random_token",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"v1",
										"admin",
										"communities",
										"random_token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/announcements",
					"item": [
						{
							"name": "/v1/admin/announcements 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/** ",
											" * Tests for HTTP status code",
											" * 204 = No Content",
											" */",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"/**",
											" * This generic test checks to see a response time of the API falls between 200ms and 10s",
											" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
											" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
											" * It is an all or nothing type deal. ",
											" * ",
											" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
											" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
											" */",
											"pm.test(\"Response time is less than 10s\", function () {",
											"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
											"    for (let i = 0; i < responseTimes.length; i++){",
											"        if(pm.response.responseTime < responseTimes[0]) {",
											"            msg = `Response time was less than ${responseTimes[0]}ms`;",
											"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(responseTimes[i] >= pm.response.responseTime) {",
											"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
											"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
											"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
											"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
											"            pm.test(msg, () => false);",
											"            break;",
											"        }",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
											"",
											"var jwtSecret = pm.environment.get('jwt_secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': 'admin_token',",
											"\t'roles': ['ADMIN'],",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)",
											"",
											"",
											"//set valid until in 2 days",
											"const currentDate = new Date();",
											"const twoDaysLater = new Date(currentDate);",
											"twoDaysLater.setDate(currentDate.getDate() + 2);",
											"",
											"const isoString = twoDaysLater.toISOString();",
											"",
											"pm.variables.set(\"twoDaysLater\", isoString);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Announcement Title\",\n    \"body\": \"Announcement Body\",\n    \"valid_until\": \"{{twoDaysLater}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/v1/admin/announcements",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"v1",
										"admin",
										"announcements"
									]
								}
							},
							"response": []
						},
						{
							"name": "/v1/admin/announcements 403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/** ",
											" * Tests for HTTP status code",
											" * 403 = FORBIDDEN",
											" */",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"/**",
											" * This generic test checks to see a response time of the API falls between 200ms and 10s",
											" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
											" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
											" * It is an all or nothing type deal. ",
											" * ",
											" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
											" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
											" */",
											"pm.test(\"Response time is less than 10s\", function () {",
											"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
											"    for (let i = 0; i < responseTimes.length; i++){",
											"        if(pm.response.responseTime < responseTimes[0]) {",
											"            msg = `Response time was less than ${responseTimes[0]}ms`;",
											"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(responseTimes[i] >= pm.response.responseTime) {",
											"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
											"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
											"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
											"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
											"            pm.test(msg, () => false);",
											"            break;",
											"        }",
											"    }",
											"});",
											"",
											"/**",
											" * Is the data empty?",
											" */",
											"pm.test(\"Test object properties\", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"});",
											"/**",
											" * Does the data have the keys we expect it to?",
											" */",
											"pm.test(\"Test keys properties\", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
											"        \"detail\", ",
											")",
											"});",
											"",
											"/**",
											" * Do the keys in the response have :",
											" * The data type we expect it to?",
											" * The value we expect it to?",
											" * The length we expect it to?",
											" */",
											"pm.test(\"Type and value tests\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.a(\"string\");",
											"    pm.expect(jsonData.detail).to.eql(\"Operation is not permitted\");",
											"});",
											"",
											"/**",
											" *)jv schema validation - https://ajv.js.org/",
											" * The following test is designed to guard against schema changes",
											" * without considering downstream impact. This is the JSON schema",
											" * for the response coming back from the API",
											" */",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"detail\": {",
											"            \"type\": \"string\",",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"detail\",",
											"    ],",
											"    \"additionalProperties\": false",
											"};",
											"pm.test(\"Schema is valid\", function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
											"",
											"var jwtSecret = pm.environment.get('jwt_secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': 'admin_token',",
											"\t'roles': ['DRIVER'],",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Announcement Title\",\n    \"body\": \"Announcement Body\",\n    \"valid_until\": \"{{twoDaysLater}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/v1/admin/announcements",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"v1",
										"admin",
										"announcements"
									]
								}
							},
							"response": []
						},
						{
							"name": "/v1/admin/announcements/{announcement_token} 200 OK",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/** ",
											" * Tests for HTTP status code",
											" * 204 = No Content",
											" */",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"/**",
											" * This generic test checks to see a response time of the API falls between 200ms and 10s",
											" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
											" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
											" * It is an all or nothing type deal. ",
											" * ",
											" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
											" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
											" */",
											"pm.test(\"Response time is less than 10s\", function () {",
											"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
											"    for (let i = 0; i < responseTimes.length; i++){",
											"        if(pm.response.responseTime < responseTimes[0]) {",
											"            msg = `Response time was less than ${responseTimes[0]}ms`;",
											"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(responseTimes[i] >= pm.response.responseTime) {",
											"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
											"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
											"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
											"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
											"            pm.test(msg, () => false);",
											"            break;",
											"        }",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
											"",
											"var jwtSecret = pm.environment.get('jwt_secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': 'admin_token',",
											"\t'roles': ['ADMIN'],",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)",
											"",
											"",
											"//set valid until in 2 days",
											"const currentDate = new Date();",
											"const twoDaysLater = new Date(currentDate);",
											"twoDaysLater.setDate(currentDate.getDate() + 2);",
											"",
											"const isoString = twoDaysLater.toISOString();",
											"",
											"pm.variables.set(\"twoDaysLater\", isoString);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"New Announcement Title\",\n    \"body\": \"New Announcement Body\",\n    \"valid_until\": \"{{twoDaysLater}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/v1/admin/announcements/65d67bb2-d1a3-43ba-8804-79975a8fedf5",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"v1",
										"admin",
										"announcements",
										"65d67bb2-d1a3-43ba-8804-79975a8fedf5"
									]
								}
							},
							"response": []
						},
						{
							"name": "/v1/admin/announcements/{announcement_token} 200 OK Deactivate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/** ",
											" * Tests for HTTP status code",
											" * 204 = No Content",
											" */",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"/**",
											" * This generic test checks to see a response time of the API falls between 200ms and 10s",
											" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
											" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
											" * It is an all or nothing type deal. ",
											" * ",
											" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
											" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
											" */",
											"pm.test(\"Response time is less than 10s\", function () {",
											"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
											"    for (let i = 0; i < responseTimes.length; i++){",
											"        if(pm.response.responseTime < responseTimes[0]) {",
											"            msg = `Response time was less than ${responseTimes[0]}ms`;",
											"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(responseTimes[i] >= pm.response.responseTime) {",
											"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
											"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
											"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
											"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
											"            pm.test(msg, () => false);",
											"            break;",
											"        }",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
											"",
											"var jwtSecret = pm.environment.get('jwt_secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': 'admin_token',",
											"\t'roles': ['ADMIN'],",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)",
											"",
											"",
											"//set valid until in 2 days",
											"const currentDate = new Date();",
											"const twoDaysLater = new Date(currentDate);",
											"twoDaysLater.setDate(currentDate.getDate() + 2);",
											"",
											"const isoString = twoDaysLater.toISOString();",
											"",
											"pm.variables.set(\"twoDaysLater\", isoString);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"valid_until\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/v1/admin/announcements/45d67bb2-d1a3-43ba-1104-88975a8fedf5",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"v1",
										"admin",
										"announcements",
										"45d67bb2-d1a3-43ba-1104-88975a8fedf5"
									]
								}
							},
							"response": []
						},
						{
							"name": "/v1/admin/announcements/{announcement_token} 403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/** ",
											" * Tests for HTTP status code",
											" * 403 = FORBIDDEN",
											" */",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"/**",
											" * This generic test checks to see a response time of the API falls between 200ms and 10s",
											" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
											" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
											" * It is an all or nothing type deal. ",
											" * ",
											" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
											" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
											" */",
											"pm.test(\"Response time is less than 10s\", function () {",
											"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
											"    for (let i = 0; i < responseTimes.length; i++){",
											"        if(pm.response.responseTime < responseTimes[0]) {",
											"            msg = `Response time was less than ${responseTimes[0]}ms`;",
											"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(responseTimes[i] >= pm.response.responseTime) {",
											"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
											"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
											"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
											"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
											"            pm.test(msg, () => false);",
											"            break;",
											"        }",
											"    }",
											"});",
											"",
											"/**",
											" * Is the data empty?",
											" */",
											"pm.test(\"Test object properties\", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"});",
											"/**",
											" * Does the data have the keys we expect it to?",
											" */",
											"pm.test(\"Test keys properties\", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
											"        \"detail\", ",
											")",
											"});",
											"",
											"/**",
											" * Do the keys in the response have :",
											" * The data type we expect it to?",
											" * The value we expect it to?",
											" * The length we expect it to?",
											" */",
											"pm.test(\"Type and value tests\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.a(\"string\");",
											"    pm.expect(jsonData.detail).to.eql(\"Operation is not permitted\");",
											"});",
											"",
											"/**",
											" *)jv schema validation - https://ajv.js.org/",
											" * The following test is designed to guard against schema changes",
											" * without considering downstream impact. This is the JSON schema",
											" * for the response coming back from the API",
											" */",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"detail\": {",
											"            \"type\": \"string\",",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"detail\",",
											"    ],",
											"    \"additionalProperties\": false",
											"};",
											"pm.test(\"Schema is valid\", function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
											"",
											"var jwtSecret = pm.environment.get('jwt_secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': 'admin_token',",
											"\t'roles': ['DRIVER'],",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"New Announcement Title\",\n    \"body\": \"New Announcement Body\",\n    \"valid_until\": \"{{twoDaysLater}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/v1/admin/announcements/65d67bb2-d1a3-43ba-8804-79975a8fedf5",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"v1",
										"admin",
										"announcements",
										"65d67bb2-d1a3-43ba-8804-79975a8fedf5"
									]
								}
							},
							"response": []
						},
						{
							"name": "/v1/admin/announcements/{announcement_token} 404 Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/** ",
											" * Tests for HTTP status code",
											" * 403 = FORBIDDEN",
											" */",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"/**",
											" * This generic test checks to see a response time of the API falls between 200ms and 10s",
											" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
											" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
											" * It is an all or nothing type deal. ",
											" * ",
											" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
											" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
											" */",
											"pm.test(\"Response time is less than 10s\", function () {",
											"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
											"    for (let i = 0; i < responseTimes.length; i++){",
											"        if(pm.response.responseTime < responseTimes[0]) {",
											"            msg = `Response time was less than ${responseTimes[0]}ms`;",
											"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(responseTimes[i] >= pm.response.responseTime) {",
											"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
											"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
											"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
											"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
											"            pm.test(msg, () => false);",
											"            break;",
											"        }",
											"    }",
											"});",
											"",
											"/**",
											" * Is the data empty?",
											" */",
											"pm.test(\"Test object properties\", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"});",
											"/**",
											" * Does the data have the keys we expect it to?",
											" */",
											"pm.test(\"Test keys properties\", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
											"        \"detail\", ",
											")",
											"});",
											"",
											"/**",
											" * Do the keys in the response have :",
											" * The data type we expect it to?",
											" * The value we expect it to?",
											" * The length we expect it to?",
											" */",
											"pm.test(\"Type and value tests\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.a(\"string\");",
											"    pm.expect(jsonData.detail).to.eql(\"Announcement not found: random_token\");",
											"});",
											"",
											"/**",
											" *)jv schema validation - https://ajv.js.org/",
											" * The following test is designed to guard against schema changes",
											" * without considering downstream impact. This is the JSON schema",
											" * for the response coming back from the API",
											" */",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"detail\": {",
											"            \"type\": \"string\",",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"detail\",",
											"    ],",
											"    \"additionalProperties\": false",
											"};",
											"pm.test(\"Schema is valid\", function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
											"",
											"var jwtSecret = pm.environment.get('jwt_secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': 'admin_token',",
											"\t'roles': ['ADMIN'],",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)",
											"",
											"",
											"//set valid until in 2 days",
											"const currentDate = new Date();",
											"const twoDaysLater = new Date(currentDate);",
											"twoDaysLater.setDate(currentDate.getDate() + 2);",
											"",
											"const isoString = twoDaysLater.toISOString();",
											"",
											"pm.variables.set(\"twoDaysLater\", isoString);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"New Announcement Title\",\n    \"body\": \"New Announcement Body\",\n    \"valid_until\": \"{{twoDaysLater}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/v1/admin/announcements/random_token",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"v1",
										"admin",
										"announcements",
										"random_token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/auto-driver",
					"item": [
						{
							"name": "/v1/admin/auto-driver/{auto_driver_token} 200 OK",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/** ",
											" * Tests for HTTP status code",
											" * 204 = No Content",
											" */",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"/**",
											" * This generic test checks to see a response time of the API falls between 200ms and 10s",
											" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
											" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
											" * It is an all or nothing type deal. ",
											" * ",
											" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
											" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
											" */",
											"pm.test(\"Response time is less than 10s\", function () {",
											"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
											"    for (let i = 0; i < responseTimes.length; i++){",
											"        if(pm.response.responseTime < responseTimes[0]) {",
											"            msg = `Response time was less than ${responseTimes[0]}ms`;",
											"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(responseTimes[i] >= pm.response.responseTime) {",
											"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
											"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
											"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
											"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
											"            pm.test(msg, () => false);",
											"            break;",
											"        }",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
											"",
											"var jwtSecret = pm.environment.get('jwt_secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': 'admin_token',",
											"\t'roles': ['ADMIN'],",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)",
											"",
											"",
											"//set valid until in 2 days",
											"const currentDate = new Date();",
											"const twoDaysLater = new Date(currentDate);",
											"twoDaysLater.setDate(currentDate.getDate() + 2);",
											"",
											"const isoString = twoDaysLater.toISOString();",
											"",
											"pm.variables.set(\"twoDaysLater\", isoString);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"PREMIUM\",\n    \"password\": \"new_password\",\n    \"email\": \"new_email@cft.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/v1/admin/auto-driver/removed_driver_token2",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"v1",
										"admin",
										"auto-driver",
										"removed_driver_token2"
									]
								}
							},
							"response": []
						},
						{
							"name": "/v1/admin/auto-driver/{auto_driver_token} 403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/** ",
											" * Tests for HTTP status code",
											" * 403 = FORBIDDEN",
											" */",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"/**",
											" * This generic test checks to see a response time of the API falls between 200ms and 10s",
											" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
											" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
											" * It is an all or nothing type deal. ",
											" * ",
											" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
											" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
											" */",
											"pm.test(\"Response time is less than 10s\", function () {",
											"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
											"    for (let i = 0; i < responseTimes.length; i++){",
											"        if(pm.response.responseTime < responseTimes[0]) {",
											"            msg = `Response time was less than ${responseTimes[0]}ms`;",
											"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(responseTimes[i] >= pm.response.responseTime) {",
											"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
											"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
											"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
											"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
											"            pm.test(msg, () => false);",
											"            break;",
											"        }",
											"    }",
											"});",
											"",
											"/**",
											" * Is the data empty?",
											" */",
											"pm.test(\"Test object properties\", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"});",
											"/**",
											" * Does the data have the keys we expect it to?",
											" */",
											"pm.test(\"Test keys properties\", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
											"        \"detail\", ",
											")",
											"});",
											"",
											"/**",
											" * Do the keys in the response have :",
											" * The data type we expect it to?",
											" * The value we expect it to?",
											" * The length we expect it to?",
											" */",
											"pm.test(\"Type and value tests\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.a(\"string\");",
											"    pm.expect(jsonData.detail).to.eql(\"Operation is not permitted\");",
											"});",
											"",
											"/**",
											" *)jv schema validation - https://ajv.js.org/",
											" * The following test is designed to guard against schema changes",
											" * without considering downstream impact. This is the JSON schema",
											" * for the response coming back from the API",
											" */",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"detail\": {",
											"            \"type\": \"string\",",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"detail\",",
											"    ],",
											"    \"additionalProperties\": false",
											"};",
											"pm.test(\"Schema is valid\", function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
											"",
											"var jwtSecret = pm.environment.get('jwt_secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': 'admin_token',",
											"\t'roles': ['AUTO_DRIVER'],",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"PREMIUM\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/v1/admin/auto-driver/driver_token",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"v1",
										"admin",
										"auto-driver",
										"driver_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "/v1/admin/auto-driver/{auto_driver_token} 422 Email Already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/** ",
											" * Tests for HTTP status code",
											" * 422 = Unprocessable Entity",
											" */",
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"/**",
											" * This generic test checks to see a response time of the API falls between 200ms and 10s",
											" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
											" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
											" * It is an all or nothing type deal. ",
											" * ",
											" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
											" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
											" */",
											"pm.test(\"Response time is less than 10s\", function () {",
											"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
											"    for (let i = 0; i < responseTimes.length; i++){",
											"        if(pm.response.responseTime < responseTimes[0]) {",
											"            msg = `Response time was less than ${responseTimes[0]}ms`;",
											"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(responseTimes[i] >= pm.response.responseTime) {",
											"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
											"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
											"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
											"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
											"            pm.test(msg, () => false);",
											"            break;",
											"        }",
											"    }",
											"});",
											"",
											"/**",
											" * Is the data empty?",
											" */",
											"pm.test(\"Test object properties\", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"});",
											"/**",
											" * Does the data have the keys we expect it to?",
											" */",
											"pm.test(\"Test keys properties\", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
											"        \"detail\", ",
											")",
											"});",
											"",
											"/**",
											" * Do the keys in the response have :",
											" * The data type we expect it to?",
											" * The value we expect it to?",
											" * The length we expect it to?",
											" */",
											"pm.test(\"Type and value tests\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.a(\"string\");",
											"    pm.expect(jsonData.detail).to.eql(\"Email already exists: driver3@corefortech.com\");",
											"});",
											"",
											"/**",
											" *)jv schema validation - https://ajv.js.org/",
											" * The following test is designed to guard against schema changes",
											" * without considering downstream impact. This is the JSON schema",
											" * for the response coming back from the API",
											" */",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"detail\": {",
											"            \"type\": \"string\",",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"detail\",",
											"    ],",
											"    \"additionalProperties\": false",
											"};",
											"pm.test(\"Schema is valid\", function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
											"",
											"var jwtSecret = pm.environment.get('jwt_secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': 'admin_token',",
											"\t'roles': ['ADMIN'],",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)",
											"",
											"",
											"//set valid until in 2 days",
											"const currentDate = new Date();",
											"const twoDaysLater = new Date(currentDate);",
											"twoDaysLater.setDate(currentDate.getDate() + 2);",
											"",
											"const isoString = twoDaysLater.toISOString();",
											"",
											"pm.variables.set(\"twoDaysLater\", isoString);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"driver3@corefortech.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/v1/admin/auto-driver/driver_token",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"v1",
										"admin",
										"auto-driver",
										"driver_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "/v1/admin/auto-driver/{auto_driver_token} 404 Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/** ",
											" * Tests for HTTP status code",
											" * 403 = FORBIDDEN",
											" */",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"/**",
											" * This generic test checks to see a response time of the API falls between 200ms and 10s",
											" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
											" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
											" * It is an all or nothing type deal. ",
											" * ",
											" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
											" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
											" */",
											"pm.test(\"Response time is less than 10s\", function () {",
											"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
											"    for (let i = 0; i < responseTimes.length; i++){",
											"        if(pm.response.responseTime < responseTimes[0]) {",
											"            msg = `Response time was less than ${responseTimes[0]}ms`;",
											"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(responseTimes[i] >= pm.response.responseTime) {",
											"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
											"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
											"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
											"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
											"            pm.test(msg, () => false);",
											"            break;",
											"        }",
											"    }",
											"});",
											"",
											"/**",
											" * Is the data empty?",
											" */",
											"pm.test(\"Test object properties\", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"});",
											"/**",
											" * Does the data have the keys we expect it to?",
											" */",
											"pm.test(\"Test keys properties\", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
											"        \"detail\", ",
											")",
											"});",
											"",
											"/**",
											" * Do the keys in the response have :",
											" * The data type we expect it to?",
											" * The value we expect it to?",
											" * The length we expect it to?",
											" */",
											"pm.test(\"Type and value tests\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.a(\"string\");",
											"    pm.expect(jsonData.detail).to.eql(\"Driver not found: random_token\");",
											"});",
											"",
											"/**",
											" *)jv schema validation - https://ajv.js.org/",
											" * The following test is designed to guard against schema changes",
											" * without considering downstream impact. This is the JSON schema",
											" * for the response coming back from the API",
											" */",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"detail\": {",
											"            \"type\": \"string\",",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"detail\",",
											"    ],",
											"    \"additionalProperties\": false",
											"};",
											"pm.test(\"Schema is valid\", function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
											"",
											"var jwtSecret = pm.environment.get('jwt_secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': 'admin_token',",
											"\t'roles': ['ADMIN'],",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)",
											"",
											"",
											"//set valid until in 2 days",
											"const currentDate = new Date();",
											"const twoDaysLater = new Date(currentDate);",
											"twoDaysLater.setDate(currentDate.getDate() + 2);",
											"",
											"const isoString = twoDaysLater.toISOString();",
											"",
											"pm.variables.set(\"twoDaysLater\", isoString);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"PREMIUM\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/v1/admin/auto-driver/random_token",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"v1",
										"admin",
										"auto-driver",
										"random_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "/v1/admin/auto-driver/{driver_token}/details 200 OK",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
											"",
											"var jwtSecret = pm.environment.get('jwt_secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"  'typ': 'JWT',",
											"  'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"  'iss': 'admin_token',",
											"  'roles': ['ADMIN'],",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/** ",
											" * Tests for HTTP status code",
											" * 200 = OK",
											" */",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"/**",
											" * This generic test checks to see a response time of the API falls between 200ms and 10s",
											" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
											" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
											" * It is an all or nothing type deal. ",
											" * ",
											" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
											" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
											" */",
											"pm.test(\"Response time is less than 10s\", function () {",
											"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
											"    for (let i = 0; i < responseTimes.length; i++){",
											"        if(pm.response.responseTime < responseTimes[0]) {",
											"            msg = `Response time was less than ${responseTimes[0]}ms`;",
											"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(responseTimes[i] >= pm.response.responseTime) {",
											"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
											"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
											"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
											"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
											"            pm.test(msg, () => false);",
											"            break;",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/v1/admin/auto-driver/84f35834-531a-440f-b0f0-f2be09ab0d47/details",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"v1",
										"admin",
										"auto-driver",
										"84f35834-531a-440f-b0f0-f2be09ab0d47",
										"details"
									]
								}
							},
							"response": []
						},
						{
							"name": "/v1/admin/auto-driver/{driver_token}/details 403 Forbidden",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
											"",
											"var jwtSecret = pm.environment.get('jwt_secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"  'typ': 'JWT',",
											"  'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"  'iss': 'driver_token',",
											"  'roles': ['AUTO_DRIVER'],",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/** ",
											" * Tests for HTTP status code",
											" * 403 = FORBIDDEN",
											" */",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"/**",
											" * This generic test checks to see a response time of the API falls between 200ms and 10s",
											" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
											" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
											" * It is an all or nothing type deal. ",
											" * ",
											" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
											" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
											" */",
											"pm.test(\"Response time is less than 10s\", function () {",
											"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
											"    for (let i = 0; i < responseTimes.length; i++){",
											"        if(pm.response.responseTime < responseTimes[0]) {",
											"            msg = `Response time was less than ${responseTimes[0]}ms`;",
											"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(responseTimes[i] >= pm.response.responseTime) {",
											"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
											"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
											"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
											"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
											"            pm.test(msg, () => false);",
											"            break;",
											"        }",
											"    }",
											"});",
											"",
											"/**",
											" * Is the data empty?",
											" */",
											"pm.test(\"Test object properties\", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"});",
											"/**",
											" * Does the data have the keys we expect it to?",
											" */",
											"pm.test(\"Test keys properties\", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
											"        \"detail\", ",
											")",
											"});",
											"",
											"/**",
											" * Do the keys in the response have :",
											" * The data type we expect it to?",
											" * The value we expect it to?",
											" * The length we expect it to?",
											" */",
											"pm.test(\"Type and value tests\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.a(\"string\");",
											"    pm.expect(jsonData.detail).to.eql(\"Operation is not permitted\");",
											"});",
											"",
											"/**",
											" *)jv schema validation - https://ajv.js.org/",
											" * The following test is designed to guard against schema changes",
											" * without considering downstream impact. This is the JSON schema",
											" * for the response coming back from the API",
											" */",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"detail\": {",
											"            \"type\": \"string\",",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"detail\",",
											"    ],",
											"    \"additionalProperties\": false",
											"};",
											"pm.test(\"Schema is valid\", function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/v1/admin/auto-driver/84f35834-531a-440f-b0f0-f2be09ab0d47/details",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"v1",
										"admin",
										"auto-driver",
										"84f35834-531a-440f-b0f0-f2be09ab0d47",
										"details"
									]
								}
							},
							"response": []
						},
						{
							"name": "/v1/admin/auto-driver/{driver_token}/diagnosis 200 OK",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
											"",
											"var jwtSecret = pm.environment.get('jwt_secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"  'typ': 'JWT',",
											"  'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"  'iss': 'admin_token',",
											"  'roles': ['ADMIN'],",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/** ",
											" * Tests for HTTP status code",
											" * 200 = OK",
											" */",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"/**",
											" * This generic test checks to see a response time of the API falls between 200ms and 10s",
											" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
											" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
											" * It is an all or nothing type deal. ",
											" * ",
											" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
											" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
											" */",
											"pm.test(\"Response time is less than 10s\", function () {",
											"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
											"    for (let i = 0; i < responseTimes.length; i++){",
											"        if(pm.response.responseTime < responseTimes[0]) {",
											"            msg = `Response time was less than ${responseTimes[0]}ms`;",
											"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(responseTimes[i] >= pm.response.responseTime) {",
											"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
											"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
											"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
											"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
											"            pm.test(msg, () => false);",
											"            break;",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/v1/admin/auto-driver/cd848be1-ea0d-43bd-a021-df315deada5d/diagnosis",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"v1",
										"admin",
										"auto-driver",
										"cd848be1-ea0d-43bd-a021-df315deada5d",
										"diagnosis"
									]
								}
							},
							"response": []
						},
						{
							"name": "/v1/admin/auto-driver/{driver_token}/diagnosis 403 Forbidden",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
											"",
											"var jwtSecret = pm.environment.get('jwt_secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"  'typ': 'JWT',",
											"  'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"  'iss': 'driver_token',",
											"  'roles': ['AUTO_DRIVER'],",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/** ",
											" * Tests for HTTP status code",
											" * 403 = FORBIDDEN",
											" */",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"/**",
											" * This generic test checks to see a response time of the API falls between 200ms and 10s",
											" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
											" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
											" * It is an all or nothing type deal. ",
											" * ",
											" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
											" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
											" */",
											"pm.test(\"Response time is less than 10s\", function () {",
											"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
											"    for (let i = 0; i < responseTimes.length; i++){",
											"        if(pm.response.responseTime < responseTimes[0]) {",
											"            msg = `Response time was less than ${responseTimes[0]}ms`;",
											"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(responseTimes[i] >= pm.response.responseTime) {",
											"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
											"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
											"            pm.test(msg, () => true);",
											"            break;",
											"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
											"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
											"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
											"            pm.test(msg, () => false);",
											"            break;",
											"        }",
											"    }",
											"});",
											"",
											"/**",
											" * Is the data empty?",
											" */",
											"pm.test(\"Test object properties\", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"});",
											"/**",
											" * Does the data have the keys we expect it to?",
											" */",
											"pm.test(\"Test keys properties\", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
											"        \"detail\", ",
											")",
											"});",
											"",
											"/**",
											" * Do the keys in the response have :",
											" * The data type we expect it to?",
											" * The value we expect it to?",
											" * The length we expect it to?",
											" */",
											"pm.test(\"Type and value tests\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.a(\"string\");",
											"    pm.expect(jsonData.detail).to.eql(\"Operation is not permitted\");",
											"});",
											"",
											"/**",
											" *)jv schema validation - https://ajv.js.org/",
											" * The following test is designed to guard against schema changes",
											" * without considering downstream impact. This is the JSON schema",
											" * for the response coming back from the API",
											" */",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"detail\": {",
											"            \"type\": \"string\",",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"detail\",",
											"    ],",
											"    \"additionalProperties\": false",
											"};",
											"pm.test(\"Schema is valid\", function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/v1/admin/auto-driver/84f35834-531a-440f-b0f0-f2be09ab0d47/diagnosis",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"v1",
										"admin",
										"auto-driver",
										"84f35834-531a-440f-b0f0-f2be09ab0d47",
										"diagnosis"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "/v1/gcu",
			"item": [
				{
					"name": "/v1/gcu/latest 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 200 = OK",
									" */",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(\"version\", \"created_at\")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.version).to.a(\"string\");",
									"    pm.expect(jsonData.created_at).to.a(\"string\"); ",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"version\": {",
									"            \"type\": \"string\",",
									"        },",
									"        \"created_at\":{",
									"            \"type\": \"string\"",
									"        }",
									"    },    ",
									"    \"required\": [",
									"        \"version\",",
									"        \"created_at\"",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_token',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/gcu/latest",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"gcu",
								"latest"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/gcu/latest/accept 204 No Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 204 = No Content",
									" */",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_token',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/gcu/latest/accept",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"gcu",
								"latest",
								"accept"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/gcu/latest/accept 404 Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 403 = FORBIDDEN",
									" */",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Driver not found: random_token\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'random_token',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/gcu/latest/accept",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"gcu",
								"latest",
								"accept"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/v1/auto-driver",
			"item": [
				{
					"name": "/v1/auto-driver/me/profile 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"/** ",
									" * Tests for HTTP status code",
									" * 200 = OK",
									" */",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"name\",",
									"        \"firstname\",",
									"        \"phone_number\",",
									"        \"phone_number_country\",",
									"        \"gender\",",
									"        \"birth_date\",",
									"        \"go_to_sleep_hour\",",
									"        \"wake_up_hour\",",
									"        \"car_registration_number\",",
									"        \"car_registration_country\",",
									"        \"driving_license_issue_year\",",
									"        \"token\",",
									"        \"gcu_version\",",
									"        \"gcu_accepted_at\",",
									"        \"email\",",
									"        \"referral_code\",",
									"        \"insurance_company\",",
									"        \"type\"",
									"    )",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"name\": {",
									"            \"type\": \"string\",",
									"        },",
									"        \"firstname\": {",
									"            \"type\": \"string\",",
									"        },",
									"        \"phone_number\": {",
									"            \"type\": \"string\",",
									"        },",
									"        \"phone_number_country\": {",
									"            \"type\": [\"string\", \"null\"]",
									"        },",
									"        \"gender\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"birth_date\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"go_to_sleep_hour\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"wake_up_hour\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"car_registration_number\": {",
									"            \"type\": [\"string\", \"null\"]",
									"        },",
									"        \"car_registration_country\": {",
									"            \"type\": [\"string\", \"null\"]",
									"        },",
									"        \"driving_license_issue_year\": {",
									"            \"type\": [\"string\", \"null\"]",
									"        },",
									"        \"token\": {",
									"            \"type\": \"string\",",
									"        },",
									"        \"gcu_version\": {",
									"            \"type\": [\"string\", \"null\"]",
									"        },",
									"        \"gcu_accepted_at\": {",
									"            \"type\": [\"string\", \"null\"]",
									"        },",
									"        \"referral_code\": {",
									"            \"type\": [\"string\", \"null\"]",
									"        },",
									"        \"email\": {",
									"            \"type\": \"string\",",
									"        },",
									"        \"insurance_company\": {",
									"            \"type\": [\"string\", \"null\"]",
									"        },",
									"    },    ",
									"    \"required\": [",
									"        \"name\",",
									"        \"firstname\",",
									"        \"phone_number\",",
									"        \"phone_number_country\",",
									"        \"gender\",",
									"        \"birth_date\",",
									"        \"go_to_sleep_hour\",",
									"        \"wake_up_hour\",",
									"        \"car_registration_number\",",
									"        \"car_registration_country\",",
									"        \"driving_license_issue_year\",",
									"        \"token\",",
									"        \"gcu_version\",",
									"        \"gcu_accepted_at\",",
									"        \"email\",",
									"        \"referral_code\",",
									"        \"insurance_company\",",
									"        \"type\"",
									"    ],",
									"    \"additionalProperties\": true",
									"};",
									"",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_token',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/auto-driver/me/profile",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"auto-driver",
								"me",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/auto-driver/me/profile 404 Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 403 = FORBIDDEN",
									" */",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Driver not found: random_token\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'random_token',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/auto-driver/me/profile",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"auto-driver",
								"me",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/auto-driver/me/profile 403 Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 403 = FORBIDDEN",
									" */",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Operation is not permitted\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver_token',",
									"\t'roles': ['RANDOM'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/auto-driver/me/profile",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"auto-driver",
								"me",
								"profile"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/v1/auth",
			"item": [
				{
					"name": "/v1/auth/login 200 OK",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"/** ",
									" * Tests for HTTP status code",
									" * 200 = OK",
									" */",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"    \"access_token\",",
									"    \"refresh_token\"",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.access_token).to.a(\"string\");",
									"    pm.expect(jsonData.refresh_token).to.a(\"string\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"access_token\": {",
									"            \"type\": \"string\",",
									"        },",
									"        \"refresh_token\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },    ",
									"    \"required\": [",
									"        \"access_token\",",
									"        \"refresh_token\"",
									"    ],",
									"    \"additionalProperties\": true",
									"};",
									"",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"login\": \"driver1@corefortech.com\", \"password\": \"1233333\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/v1/auth/login",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/auth/passwordless-login 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || 'SuperSecret'",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256',",
									"    'kid': '3287629b-a3d1-40bf-824c-df90f57cafba'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'joined_driver_token',",
									"    'exp': currentTimestamp + 600",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('passwordless_login_jwt', signedToken)",
									"console.log('Signed and encoded passwordless_login_jwt', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{passwordless_login_jwt}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/v1/auth/passwordless-login",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"auth",
								"passwordless-login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/auth/login 404 User Not Found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 404 = Not Found",
									" */",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Wrong credentials\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"login\": \"wrong@coreofortech.com\", \"password\": \"1233\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/v1/auth/login",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/auth/login 401 Password Incorrect",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 401 = Unauthorized",
									" */",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Wrong credentials\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"login\": \"test@coreofortech.com\", \"password\": \"wrong\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/v1/auth/login",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/auth/refresh-token 200 OK",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"/** ",
									" * Tests for HTTP status code",
									" * 200 = OK",
									" */",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"    \"access_token\",",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.access_token).to.a(\"string\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"access_token\": {",
									"            \"type\": \"string\",",
									"        },",
									"    },    ",
									"    \"required\": [",
									"        \"access_token\",",
									"    ],",
									"    \"additionalProperties\": true",
									"};",
									"",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh_token\": \"{{refresh_token}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/v1/auth/refresh-token",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"auth",
								"refresh-token"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/auth/refresh-token 401 Token Invalid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'random',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 401 = Unauthorized",
									" */",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Unauthorized: Token is invalid\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh_token\": \"{{signedToken}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/v1/auth/refresh-token",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"auth",
								"refresh-token"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/auth/google-login 200 OK",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'random',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"/** ",
									" * Tests for HTTP status code",
									" * 200 = OK",
									" */",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"    \"access_token\",",
									"    \"refresh_token\"",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.access_token).to.a(\"string\");",
									"    pm.expect(jsonData.refresh_token).to.a(\"string\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"access_token\": {",
									"            \"type\": \"string\",",
									"        },",
									"        \"refresh_token\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },    ",
									"    \"required\": [",
									"        \"access_token\",",
									"        \"refresh_token\"",
									"    ],",
									"    \"additionalProperties\": true",
									"};",
									"",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{signedToken}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/v1/auth/google-login",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"auth",
								"google-login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/auth/facebook-login 200 OK",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'random',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"/** ",
									" * Tests for HTTP status code",
									" * 200 = OK",
									" */",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"    \"access_token\",",
									"    \"refresh_token\"",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.access_token).to.a(\"string\");",
									"    pm.expect(jsonData.refresh_token).to.a(\"string\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"access_token\": {",
									"            \"type\": \"string\",",
									"        },",
									"        \"refresh_token\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },    ",
									"    \"required\": [",
									"        \"access_token\",",
									"        \"refresh_token\"",
									"    ],",
									"    \"additionalProperties\": true",
									"};",
									"",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{signedToken}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/v1/auth/google-login",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"auth",
								"google-login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/auth/apple-login 200 OK",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'random',",
									"\t'roles': ['AUTO_DRIVER'],",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"/** ",
									" * Tests for HTTP status code",
									" * 200 = OK",
									" */",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"    \"access_token\",",
									"    \"refresh_token\"",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.access_token).to.a(\"string\");",
									"    pm.expect(jsonData.refresh_token).to.a(\"string\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"access_token\": {",
									"            \"type\": \"string\",",
									"        },",
									"        \"refresh_token\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },    ",
									"    \"required\": [",
									"        \"access_token\",",
									"        \"refresh_token\"",
									"    ],",
									"    \"additionalProperties\": true",
									"};",
									"",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{signedToken}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/v1/auth/apple-login",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"auth",
								"apple-login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/auth/passwordless-login-request 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"ylahodzich@corefortech.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/v1/auth/passwordless-login-request",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"auth",
								"passwordless-login-request"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/auth/passwordless-login-request 422 Invalid Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 422 == Unprocessable Entity",
									" */",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Email is not valid\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"12345@corefortek.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/v1/auth/passwordless-login-request",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"auth",
								"passwordless-login-request"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/auth/passwordless-login 401 Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 403 = FORBIDDEN",
									" */",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Unauthorized: Token is invalid\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256',",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver',",
									"    'exp': currentTimestamp + 600",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('passwordless_login_jwt', signedToken)",
									"console.log('Signed and encoded passwordless_login_jwt', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{passwordless_login_jwt}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/v1/auth/passwordless-login",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"auth",
								"passwordless-login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/auth/passwordless-login 401 Wrong Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/** ",
									" * Tests for HTTP status code",
									" * 403 = FORBIDDEN",
									" */",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\").that.has.all.keys(",
									"        \"detail\", ",
									")",
									"});",
									"",
									"/**",
									" * Do the keys in the response have :",
									" * The data type we expect it to?",
									" * The value we expect it to?",
									" * The length we expect it to?",
									" */",
									"pm.test(\"Type and value tests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.a(\"string\");",
									"    pm.expect(jsonData.detail).to.eql(\"Wrong credentials\");",
									"});",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"detail\": {",
									"            \"type\": \"string\",",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"detail\",",
									"    ],",
									"    \"additionalProperties\": false",
									"};",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
									"",
									"var jwtSecret = pm.environment.get('jwt_secret') || 'SuperSecret'",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256',",
									"    'kid': '3287629b-a3d1-40bf-824c-df90f57cafba'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': 'driver',",
									"    'exp': currentTimestamp + 600",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('passwordless_login_jwt', signedToken)",
									"console.log('Signed and encoded passwordless_login_jwt', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{passwordless_login_jwt}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/v1/auth/passwordless-login",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"auth",
								"passwordless-login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/v1/internal",
			"item": [
				{
					"name": "/v1/internal/communities 200 OK",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"/** ",
									" * Tests for HTTP status code",
									" * 200 = OK",
									" */",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\")",
									"});",
									"",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"array\",",
									"    \"items\": {",
									"        \"type\": \"object\",",
									"        \"required\": [",
									"            \"token\",",
									"            \"name\",",
									"            \"size\",",
									"            \"moderators\",",
									"            \"community_type\"",
									"        ],",
									"    },",
									"};",
									"",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\"e6a731d6-3d28-4152-98ae-53c2cf9960d8\", \"65d67bb2-d1a3-43ba-8804-79975a8fedf5\"]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/v1/internal/communities",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"internal",
								"communities"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/internal/auto-driver/{driver_token}/communities 200 OK Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"/** ",
									" * Tests for HTTP status code",
									" * 200 = OK",
									" */",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\")",
									"});",
									"",
									"",
									"/**",
									" *)jv schema validation - https://ajv.js.org/",
									" * The following test is designed to guard against schema changes",
									" * without considering downstream impact. This is the JSON schema",
									" * for the response coming back from the API",
									" */",
									"const schema = {",
									"    \"type\": \"array\",",
									"    \"items\": {",
									"        \"type\": \"string\",",
									"    }",
									"};",
									"",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/v1/internal/auto-driver/driver_token/communities",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"internal",
								"auto-driver",
								"driver_token",
								"communities"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/internal/auto-driver/{driver_token}/ranks 200 OK",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"/** ",
									" * Tests for HTTP status code",
									" * 200 = OK",
									" */",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"community_token\":\"e6a731d6-3d28-4152-98ae-53c2cf9960d8\",\n        \"length\": \"week\",\n        \"criteria\": [\"distraction\"]\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/v1/internal/auto-driver/driver_token/ranks",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"internal",
								"auto-driver",
								"driver_token",
								"ranks"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/internal/communities/auto-drivers 200 OK Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"/** ",
									" * Tests for HTTP status code",
									" * 200 = OK",
									" */",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"/**",
									" * This generic test checks to see a response time of the API falls between 200ms and 10s",
									" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
									" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
									" * It is an all or nothing type deal. ",
									" * ",
									" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
									" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
									" */",
									"pm.test(\"Response time is less than 10s\", function () {",
									"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
									"    for (let i = 0; i < responseTimes.length; i++){",
									"        if(pm.response.responseTime < responseTimes[0]) {",
									"            msg = `Response time was less than ${responseTimes[0]}ms`;",
									"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(responseTimes[i] >= pm.response.responseTime) {",
									"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
									"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
									"            pm.test(msg, () => true);",
									"            break;",
									"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
									"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
									"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
									"            pm.test(msg, () => false);",
									"            break;",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Is the data empty?",
									" */",
									"pm.test(\"Test object properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"/**",
									" * Does the data have the keys we expect it to?",
									" */",
									"pm.test(\"Test keys properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\"e6a731d6-3d28-4152-98ae-53c2cf9960d8\", \"65d67bb2-d1a3-43ba-8804-79975a8fedf5\"]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/v1/internal/communities/auto-drivers",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"v1",
								"internal",
								"communities",
								"auto-drivers"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/healthcheck",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/** ",
							" * Tests for HTTP status code",
							" * 200 = OK",
							" */",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"/**",
							" * This generic test checks to see a response time of the API falls between 200ms and 10s",
							" * Anythng below 10 seconds will pass pm.test(msg, () => true);  We force a passing tests ",
							" * otherwise Postman/newman will fail the assertion pm.test(\"Response time is less than 10s\" ...)",
							" * It is an all or nothing type deal. ",
							" * ",
							" * We will fail the test if the API call is greater than 10 seconds. This an an arbitrary value",
							" * and can be changed, HOWEVER, if an API is taking more than 10 seconds another approach is warranted",
							" */",
							"pm.test(\"Response time is less than 10s\", function () {",
							"    let responseTimes = [200, 500, 1000, 1500, 2000, 2500, 5000, 10000];",
							"    for (let i = 0; i < responseTimes.length; i++){",
							"        if(pm.response.responseTime < responseTimes[0]) {",
							"            msg = `Response time was less than ${responseTimes[0]}ms`;",
							"            console.info(`${msg} - Total: ${pm.response.responseTime}ms`);",
							"            pm.test(msg, () => true);",
							"            break;",
							"        } else if(responseTimes[i] >= pm.response.responseTime) {",
							"            msg = `Response time was greater than ${responseTimes[i-1]}ms`",
							"            console.warn(`${msg} - Total: ${pm.response.responseTime}ms`);",
							"            pm.test(msg, () => true);",
							"            break;",
							"        } else if(pm.response.responseTime > responseTimes[responseTimes.length-1]) {",
							"            msg = `Response time was greater than ${responseTimes[responseTimes.length-1]/1000}s`",
							"            console.error(`${msg} - Total: ${pm.response.responseTime/1000}s`);",
							"            pm.test(msg, () => false);",
							"            break;",
							"        }",
							"    }",
							"});",
							"/**",
							" * Is the data empty?",
							" */",
							"pm.test(\"Test array properties\", () => {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.not.be.empty;",
							"});",
							"/**",
							" * Does the data have the keys we expect it to?",
							" */",
							"pm.test(\"Test object properties\", () => {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"status\");",
							"});",
							"/**",
							" * Do the keys in the response have :",
							" * The data type we expect it to?",
							" * The value we expect it to?",
							" * The length we expect it to?",
							" */",
							"pm.test(\"Type and value tests\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.a(\"string\");",
							"    pm.expect(jsonData.status).to.eql(\"OK\");",
							"});",
							"/**",
							" * ajv schema validation - https://ajv.js.org/",
							" * The following test is designed to guard against schema changes",
							" * without considering downstream impact. This is the JSON schema",
							" * for the response coming back from the API",
							" */",
							"const schema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"status\": {",
							"            \"type\": \"string\"",
							"        }",
							"    },",
							"    \"required\": [",
							"        \"status\",",
							"    ],",
							"    \"additionalProperties\": false",
							"};",
							"pm.test(\"Schema is valid\", function () {",
							"    pm.response.to.have.jsonSchema(schema);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{api_url}}/healthcheck",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"healthcheck"
					]
				}
			},
			"response": []
		}
	]
}
